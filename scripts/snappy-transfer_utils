#!/bin/bash

if [[ $_ == $0 ]]; then  # not sourced
    set -euo pipefail
fi

SAMPLE_SUFFIX=${SAMPLE_SUFFIX--N1-DNA1-}
GENOMEBUILD=GRCh37
VERIFY=-s
NOOP= # set to "-l" to only show syncs

mkdir -p $TMPDIR
export TMPDIR=$(mktemp -d)
trap "rm -rf $TMPDIR" ERR EXIT

# Load the ISA-Tab study sample sheet and print it line by-line printing the following columns:
#
# - patientName
# - projectUuid
#
# Arguments:
#
# - path to sheet file
# - first batch to consider
# - 0/1 indicating whether the batch should be taken from any family member (important for variant calling)
print-samples()
(
    set -x
    if [[ $# -lt 2 ]] || [[ $# -gt 3 ]]; then
        >&2 echo "USAGE: print-sheet <sheet-file> <start-batch> [<fam-batch>]"
        return
    fi
    if [[ ! -r $1 ]]; then
        >&2 echo "$1 does not exist or is read-protected"
        return
    fi

    sheet=$1
    start_batch=$2
    fam_batch=${3-0}

    grep -Pzo '^\[Data\](.*\n)*' $sheet \
    | head -n 2 \
    | tail -n 1 \
    | tr '\t' '\n' \
    | nl \
    | sed -e 's/^ \+//g' \
    > $TMPDIR/names.txt

    declare -A _cols
    while read -r colno name
    do
        _cols[$name]=$colno
    done <$TMPDIR/names.txt

    if [[ "$fam_batch" -ne 0 ]]; then
        families=
        while read -r family_id batch_no; do
            if [[ $batch_no -ge $start_batch ]]; then
                families+=" $family_id"
            fi
        done < \
        <(grep -Pzo '^\[Data\](.*\n)*' $sheet \
          | grep -v '^#' \
          | cut -f ${_cols[familyId]},${_cols[batchNo]} \
          | grep -v '^$' \
          | tail -n +3)

        family_re=$(echo $families | tr ' ' '|')

        grep -Pzo '^\[Data\](.*\n)*' $sheet \
        | tail -n +3 \
        | grep -v '^#' \
        | awk -F $'\t' "BEGIN { OFS = FS } { print \$${_cols[familyId]},\$${_cols[patientName]},\$${_cols[projectUuid]},\$${_cols[libraryType]} }" \
        | grep -v '^$' \
        | awk -F $'\t' "BEGIN { OFS = FS } (\$1 ~ /^$family_re\$/ && \$4 != \".\")" \
        | cut -f 2,3
    else
        grep -Pzo '^\[Data\](.*\n)*' $sheet \
        | grep -v '^#' \
        | tail -n +3 \
        | awk -F $'\t' "BEGIN { OFS = FS } { print \$${_cols[patientName]}, \$${_cols[batchNo]}, \$${_cols[projectUuid]}, \$${_cols[libraryType]} }" \
        | grep -v '^$' \
        | awk -F $'\t' "BEGIN { OFS = FS } (\$2 >= $start_batch && \$4 != \".\")" \
        | cut -f 1,3
    fi
)

# Transfer raw data / ngs_mapping input files for sample sheet $1 into iRODS remote $2
transfer-raw_data()
{
    if [[ $# -ne 3 ]]; then
        >&2 echo "USAGE: transfer-ngs_mapping <sheet-file> <start-batch> <sandbox>"
        return
    fi
    if [[ ! -r $1 ]]; then
        >&2 echo "$1 does not exist or is read-protected"
        return
    fi

    sheet=$1
    start_batch=$2
    sandbox=$3

    print-samples $sheet $start_batch >$TMPDIR/samples.txt

    >&2 echo "== $TMPDIR/samples.txt =="
    >&2 cat $TMPDIR/samples.txt
    >&2 echo "== END OF $TMPDIR/samples.txt =="

    while read -r patient project
    do
        sample=$(echo ngs_mapping/work/input_links/$patient$SAMPLE_SUFFIX* | tr ' ' '\n' | sort | head -n 1 | rev | cut -d / -f 1 | rev)
        dirname=ngs_mapping/work/input_links/$sample
        for path in $(find $dirname -name '*.gz')
        do
            gz=$(realpath $path)
            md5=$(realpath $path).md5
            infix=$(realpath --relative-to $dirname $(dirname $path))/
            if [[ $infix == "./" ]]; then
                infix=""
            fi

            remote_dir=$sample/raw_data/$DATE$infix

            echo \
                imkdir -p $sandbox/$remote_dir \
                ' && ' \
                'sleep 1s' \
                ' && ' \
                irsync $NOOP -v -K $VERIFY $gz $md5 i:$sandbox/$remote_dir
        done
    done <$TMPDIR/samples.txt \
    | parallel -t -j 8 '{}'
}

# Complete .md5 files in $1 (or ".").
complete-md5s()
{
    if [[ $# -eq 0 ]]; then
        dir=.
    else
        dir=$1
    fi

    find $dir -type f -o -type l \
    | grep -v '\.md5$' \
    | parallel -j 32 "cd {//}; test -e {/}.md5 || md5sum {/} >{/}.md5"
}

# Transfer the result of the ngs_mapping step for sample sheet $1 into iRODS remote $2
transfer-ngs_mapping()
{
    if [[ $# -ne 4 ]]; then
        >&2 echo "USAGE: transfer-ngs_mapping <mapper> <sheet-file> <start-batch> <sandbox>"
        return
    fi
    if [[ ! -r $2 ]]; then
        >&2 echo "$2 does not exist or is read-protected"
        return
    fi

    mapper=$1
    sheet=$2
    start_batch=$3
    sandbox=$4

    print-samples $sheet $start_batch >$TMPDIR/samples.txt

    while read -r patient project
    do
        sample=$(echo ngs_mapping/work/input_links/$patient$SAMPLE_SUFFIX* | tr ' ' '\n' | sort | head -n 1 | rev | cut -d / -f 1 | rev)
        dirname=ngs_mapping/output

        local_dir=ngs_mapping/output/$mapper.$sample
        remote_dir=$sample/$GENOMEBUILD/$DATE/ngs_mapping/$mapper.$sample

        complete-md5s $local_dir

        echo \
            imkdir -p $sandbox/$remote_dir \
            ' && ' \
            'sleep 1s' \
            ' && ' \
            irsync $NOOP -r -K -v $VERIFY $local_dir/. i:$sandbox/$remote_dir/.
    done <$TMPDIR/samples.txt \
    | parallel -t -j 8 '{}'
}

# Transfer the result of the variant_calling step for sample sheet $1 into iRODS remote $2
transfer-variant_calling()
{
    if [[ $# -ne 4 ]]; then
        >&2 echo "USAGE: transfer-variant_calling <mapper> <sheet-file> <start-batch> <sandbox>"
        return
    fi
    if [[ ! -r $2 ]]; then
        >&2 echo "$2 does not exist or is read-protected"
        return
    fi

    mapper_caller=$1
    sheet=$2
    start_batch=$3
    sandbox=$4

    print-samples $sheet $start_batch 1 >$TMPDIR/samples.txt

    while read -r patient project
    do
        sample=$(echo ngs_mapping/work/input_links/$patient$SAMPLE_SUFFIX* | tr ' ' '\n' | sort | head -n 1 | rev | cut -d / -f 1 | rev)
        dirname=variant_calling/output

        local_dir=variant_calling/output/$mapper_caller.$sample
        remote_dir=$sample/$GENOMEBUILD/$DATE/variant_calling/$mapper_caller.$sample

        if [[ ! -e $local_dir ]]; then
            echo >&2 "Skipping $patient -- not index?"
            continue
        fi

        complete-md5s $local_dir

        echo \
            imkdir -p $sandbox/$remote_dir \
            ' && ' \
            'sleep 1s' \
            ' && ' \
            irsync $NOOP -r -K -v $VERIFY $local_dir/. i:$sandbox/$remote_dir/.
    done <$TMPDIR/samples.txt \
    | parallel -t -j 8 '{}'
}

# varfish-variant_export bwa.gatk_hc $SHEET $START_BATCH $REMOTE_SHOT:$REMOTE_PATH
varfish-variant_export()
{
    if [[ $# -ne 6 ]]; then
        >&2 echo "USAGE: varfish-variant_export tools name sheet start_batch remote_host remote_path"
        return
    fi

    tools=$1
    name=$2
    sheet=$3
    start_batch=$4
    remote_host=$5
    remote_path=$6

    print-samples $sheet $start_batch 1 >$TMPDIR/samples.txt

    >&2 echo "== $TMPDIR/samples.txt =="
    >&2 cat $TMPDIR/samples.txt
    >&2 echo "== END OF $TMPDIR/samples.txt =="

    for project in $(cut -f 2 $TMPDIR/samples.txt | sort -u); do
        if [[ $start_batch -gt 1 ]]; then
            token=$name.$start_batch-$project
        else
            token=$name-$project
        fi

        ssh $remote_host mkdir -p $remote_path/$token/{tsvs,peds}

        for patient in $(grep "$project" $TMPDIR/samples.txt | cut -f 1); do
            sample=$(set +e; echo ngs_mapping/work/input_links/$patient$SAMPLE_SUFFIX* | tr ' ' '\n' | sort | head -n 1 | rev | cut -d / -f 1 | rev)
            if [[ ! -e variant_export/work/write_pedigree.${sample} ]]; then
                >&2 echo "Skipping $sample, not index?"
                continue
            fi
            ped=$(find variant_export/work/write_pedigree.${sample} -name '*.ped')
            scp $ped $remote_host:$remote_path/$token/peds

            tsvs=$(find variant_export/work/$tools.*.${sample} -name '*.tsv.gz')
            scp $tsvs $remote_host:$remote_path/$token/tsvs
        done

        (set -x; ssh $remote_host chown varfish:nobody -R $remote_path/$token)
    done
}

# varfish-targeted_seq_cnv_export bwa.gatk_hc $SHEET $START_BATCH $REMOTE_SHOT:$REMOTE_PATH
varfish-targeted_seq_cnv_export()
{
    if [[ $# -ne 6 ]]; then
        >&2 echo "USAGE: varfish-targeted_seq_cnv_export tools name sheet start_batch remote_host remote_path"
        return
    fi

    tools=$1
    name=$2
    sheet=$3
    start_batch=$4
    remote_host=$5
    remote_path=$6

    print-samples $sheet $start_batch 1 >$TMPDIR/samples.txt

    >&2 echo "== $TMPDIR/samples.txt =="
    >&2 cat $TMPDIR/samples.txt
    >&2 echo "== END OF $TMPDIR/samples.txt =="

    for project in $(cut -f 2 $TMPDIR/samples.txt | sort -u); do
        if [[ $start_batch -gt 1 ]]; then
            token=${name}_sv.$start_batch-$project
        else
            token=${name}_sv-${project}
        fi

        ssh $remote_host mkdir -p $remote_path/$token/{tsvs,peds}

        for patient in $(grep "$project" $TMPDIR/samples.txt | cut -f 1); do
            sample=$(set +e; echo ngs_mapping/work/input_links/$patient$SAMPLE_SUFFIX* | tr ' ' '\n' | sort | head -n 1 | rev | cut -d / -f 1 | rev)
            ped=$(find targeted_seq_cnv_export/work/write_pedigree.${sample} -name '*.ped')
            tsvs=$(find targeted_seq_cnv_export/work/$tools.*.${sample} -name '*.tsv.gz')

            if [[ -z "$ped" ]]; then
                >&2 echo "Skipping $sample, not index (PED not found)?"
                continue
            fi
            if [[ -z "$tsvs" ]]; then
                >&2 echo "Skipping $sample, not index (TSV not found)?"
                continue
            fi

            scp $ped $remote_host:$remote_path/$token/peds
            scp $tsvs $remote_host:$remote_path/$token/tsvs
        done

        (set -x; ssh $remote_host chown varfish:nobody -R $remote_path/$token)
    done
}

# varfish-sv_ng_export bwa.gatk_hc $SHEET $START_BATCH $REMOTE_SHOT:$REMOTE_PATH
varfish-sv_ng_export()
{
    if [[ $# -ne 7 ]]; then
        >&2 echo "USAGE: varfish-sv_ng_export svtype tools name sheet start_batch remote_host remote_path"
        return
    fi

    svtype=$1
    tools=$2
    name=$3
    sheet=$4
    start_batch=$5
    remote_host=$6
    remote_path=$7

    print-samples $sheet $start_batch 1 >$TMPDIR/samples.txt

    >&2 echo "== $TMPDIR/samples.txt =="
    >&2 cat $TMPDIR/samples.txt
    >&2 echo "== END OF $TMPDIR/samples.txt =="

    for project in $(cut -f 2 $TMPDIR/samples.txt | sort -u); do
        if [[ $start_batch -gt 1 ]]; then
            token=${name}_sv.$start_batch-$project
        else
            token=${name}_sv-${project}
        fi

        ssh $remote_host mkdir -p $remote_path/$token/{tsvs,peds}

        for patient in $(grep "$project" $TMPDIR/samples.txt | cut -f 1); do
            sample=$(set +e; echo ngs_mapping/work/input_links/$patient$SAMPLE_SUFFIX* | tr ' ' '\n' | sort | head -n 1 | rev | cut -d / -f 1 | rev)
            ped=$(find ${svtype}_export/work/write_pedigree.${sample} -name '*.ped')
            tsvs=$(find ${svtype}_export/work/$tools.*.${sample} -name '*.tsv.gz')

            if [[ -z "$ped" ]]; then
                >&2 echo "Skipping $sample, not index (PED not found)?"
                continue
            fi
            if [[ -z "$tsvs" ]]; then
                >&2 echo "Skipping $sample, not index (TSV not found)?"
                continue
            fi

            scp $ped $remote_host:$remote_path/$token/peds
            scp $tsvs $remote_host:$remote_path/$token/tsvs
        done

        (set -x; ssh $remote_host chown varfish:nobody -R $remote_path/$token)
    done
}

