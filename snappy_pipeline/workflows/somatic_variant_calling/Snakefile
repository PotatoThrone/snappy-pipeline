# -*- coding: utf-8 -*-
"""CUBI Pipeline somatic_variant_calling step Snakefile"""

import os

from snappy_pipeline import expand_ref
from snappy_pipeline.workflows.somatic_variant_calling import SomaticVariantCallingWorkflow

__author__ = "Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>"

# Configuration ===============================================================


configfile: "config.yaml"


# Expand "$ref" JSON pointers in configuration (also works for YAML)
config, lookup_paths, config_paths = expand_ref("config.yaml", config)

# WorkflowImpl Object Setup ===================================================

wf = SomaticVariantCallingWorkflow(
    workflow, config, cluster_config, lookup_paths, config_paths, os.getcwd()
)

# Rules =======================================================================


localrules:
    # Linking files from work/ to output/ should be done locally
    somatic_variant_calling_link_out_run,


rule all:
    input:
        wf.get_result_files(),


# House-Keeping ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Generic linking out ---------------------------------------------------------


rule somatic_variant_calling_link_out_run:
    input:
        wf.get_input_files("link_out", "run"),
    output:
        wf.get_output_files("link_out", "run"),
    run:
        shell(wf.get_shell_cmd("link_out", "run", wildcards))


# Somatic Variant Calling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Run MuTect ------------------------------------------------------------------


rule somatic_variant_calling_mutect_run:
    input:
        unpack(wf.get_input_files("mutect", "run")),
    output:
        **wf. get_output_files('mutect','run'),
    log:
        **wf. get_log_file('mutect','run'),
    wrapper:
        wf.wrapper_path("mutect_par")


# Run MuTect 2 ----------------------------------------------------------------


rule somatic_variant_calling_mutect2_pileup_normal:
    input:
        unpack(wf.get_input_files("mutect2", "pileup_normal")),
    output:
        **wf. get_output_files('mutect2','pileup_normal'),
    log:
        **wf. get_log_file('mutect2','pileup_normal'),
    params:
        normal_lib_name=wf.substep_getattr("mutect2", "get_normal_lib_name"),
    wrapper:
        wf.wrapper_path("mutect2/pileup")


rule somatic_variant_calling_mutect2_pileup_tumor:
    input:
        unpack(wf.get_input_files("mutect2", "pileup_tumor")),
    output:
        **wf. get_output_files('mutect2','pileup_tumor'),
    log:
        **wf. get_log_file('mutect2','pileup_tumor'),
    wrapper:
        wf.wrapper_path("mutect2/pileup")


rule somatic_variant_calling_mutect2_contamination:
    input:
        unpack(wf.get_input_files("mutect2", "contamination")),
    output:
        **wf. get_output_files('mutect2','contamination'),
    log:
        **wf. get_log_file('mutect2','contamination'),
    wrapper:
        wf.wrapper_path("mutect2/contamination")


rule somatic_variant_calling_mutect2_run:
    input:
        unpack(wf.get_input_files("mutect2", "run")),
    output:
        **wf. get_output_files('mutect2','run'),
    log:
        **wf. get_log_file('mutect2','run'),
    params:
        normal_lib_name=wf.substep_getattr("mutect2", "get_normal_lib_name"),
    wrapper:
        wf.wrapper_path("mutect2_par/run")


rule somatic_variant_calling_mutect2_filter:
    input:
        unpack(wf.get_input_files("mutect2", "filter")),
    output:
        **wf. get_output_files('mutect2','filter'),
    log:
        **wf. get_log_file('mutect2','filter'),
    params:
        normal_lib_name=wf.substep_getattr("mutect2", "get_normal_lib_name"),
        tumor_lib_name=wf.substep_getattr("mutect2", "get_tumor_lib_name"),
    wrapper:
        wf.wrapper_path("mutect2/filter")


# Run Scalpel -----------------------------------------------------------------


rule somatic_variant_calling_scalpel_run:
    input:
        unpack(wf.get_input_files("scalpel", "run")),
    output:
        **wf. get_output_files('scalpel','run'),
    log:
        **wf. get_log_file('scalpel','run'),
    params:
        normal_lib_name=wf.substep_getattr("scalpel", "get_normal_lib_name"),
    wrapper:
        wf.wrapper_path("scalpel/somatic")


# Run Strelka2 (with manta)  -----------------------------------------------------------------


rule somatic_variant_calling_strelka2_run:
    input:
        unpack(wf.get_input_files("strelka2", "run")),
    output:
        **wf. get_output_files('strelka2','run'),
    log:
        **wf. get_log_file('strelka2','run'),
    params:
        normal_lib_name=wf.substep_getattr("strelka2", "get_normal_lib_name"),
        tumor_lib_name=wf.substep_getattr("strelka2", "get_tumor_lib_name"),
    wrapper:
        wf.wrapper_path("strelka2/somatic")


# Run Bcftools call (joint) ---------------------------------------------------


rule somatic_variant_calling_bcftools_joint_run:
    input:
        unpack(wf.get_input_files("bcftools_joint", "run")),
    output:
        **wf. get_output_files('bcftools_joint','run'),
    params:
        args=wf.substep_dispatch("bcftools_joint", "get_args", "run"),
    log:
        **wf. get_log_file('bcftools_joint','run'),
    wrapper:
        wf.wrapper_path("bcftools/call_joint")


# Run Platypus (joint) --------------------------------------------------------


rule somatic_variant_calling_platypus_joint_run:
    input:
        unpack(wf.get_input_files("platypus_joint", "run")),
    output:
        **wf. get_output_files('platypus_joint','run'),
    params:
        args=wf.substep_dispatch("platypus_joint", "get_args", "run"),
    log:
        **wf. get_log_file('platypus_joint','run'),
    wrapper:
        wf.wrapper_path("platypus/call_joint")


# Run GATK UG (joint) --------------------------------------------------------


rule somatic_variant_calling_gatk_ug_joint_run:
    input:
        unpack(wf.get_input_files("gatk_ug_joint", "run")),
    output:
        **wf. get_output_files('gatk_ug_joint','run'),
    params:
        step_key="somatic_variant_calling",
        caller_key="gatk_ug_joint",
        args=wf.substep_dispatch("gatk_ug_joint", "get_args", "run"),
    log:
        **wf. get_log_file('gatk_ug_joint','run'),
    wrapper:
        wf.wrapper_path("gatk_ug_par")


# Run GATK HC (joint) --------------------------------------------------------


rule somatic_variant_calling_gatk_hc_joint_run:
    input:
        unpack(wf.get_input_files("gatk_hc_joint", "run")),
    output:
        **wf. get_output_files('gatk_hc_joint','run'),
    params:
        step_key="somatic_variant_calling",
        caller_key="gatk_hc_joint",
        args=wf.substep_dispatch("gatk_hc_joint", "get_args", "run"),
    log:
        **wf. get_log_file('gatk_hc_joint','run'),
    wrapper:
        wf.wrapper_path("gatk_hc_par")


# Run Varscan (joint) -------------------------------------------------------


rule somatic_variant_calling_varscan_joint_run:
    input:
        unpack(wf.get_input_files("varscan_joint", "run")),
    output:
        **wf. get_output_files('varscan_joint','run'),
    params:
        args=wf.substep_dispatch("varscan_joint", "get_args", "call_pedigree"),
        step_key="somatic_variant_calling",
        caller_key="varscan_joint",
    log:
        **wf. get_log_file('varscan_joint','run'),
    wrapper:
        wf.wrapper_path("varscan_par/call_joint")
